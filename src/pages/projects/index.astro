---
import "@/styles/global.css";

import { getCollection, type CollectionEntry } from "astro:content";
import type { ImageMetadata } from "astro";
import type { MarkdownHeading } from "astro";

import MainLayout from "@/layouts/MainLayout.astro";
import ProjectCard from "@/components/ProjectCard.astro";
import Search from "@/components/Search";
import TableOfContents from "@/components/TableOfContents.astro";

import createSlug from "@/lib/createSlug";

// Query pinned projects using collection filters; then sort by startDate value
type ProjectEntry = CollectionEntry<"projects">;
const pinnedProjects: ProjectEntry[] = (
    await getCollection("projects", ({ data }) => data.pinned === true)
).sort(
    (a: ProjectEntry, b: ProjectEntry) =>
        b.data.startDate.valueOf() - a.data.startDate.valueOf(),
);

// Query all other projects using collection filters; then sort by startDate desc
const projects: ProjectEntry[] = (
    await getCollection("projects", ({ data }) => data.pinned !== true)
).sort(
    (a: ProjectEntry, b: ProjectEntry) =>
        b.data.startDate.valueOf() - a.data.startDate.valueOf(),
);

const images = import.meta.glob<{ default: ImageMetadata }>(
    "/src/content/projects/*/assets/thumbnail.png",
);

// Group projects by year
const projectsByYear: Record<number, ProjectEntry[]> = projects.reduce(
    (acc: Record<number, ProjectEntry[]>, project: ProjectEntry) => {
        const year = project.data.startDate.getFullYear();
        if (!acc[year]) {
            acc[year] = [];
        }
        acc[year].push(project);
        return acc;
    },
    {},
);

// Build sections: Pinned (if any) + Year groups
const sections: { id: string; title: string; projects: ProjectEntry[] }[] = [];

if (pinnedProjects.length > 0) {
    sections.push({ id: "pinned", title: "Pinned", projects: pinnedProjects });
}

Object.entries(projectsByYear)
    .sort(([a], [b]) => Number(b) - Number(a))
    .forEach(([year, yearProjects]) => {
        sections.push({
            id: `year-${year}`,
            title: String(year),
            projects: yearProjects,
        });
    });

// Create headings from sections
const projectHeadings: MarkdownHeading[] = sections.flatMap((section) => [
    { depth: 1, slug: section.id, text: section.title },
    ...section.projects.map((project) => ({
        depth: 2,
        slug: `project-${createSlug(project.data.title, project.data?.slug)}`,
        text: project.data.title,
    })),
]);
---

<MainLayout title="Projects" layout="DEFAULT">
    <Search slot="nav-sidebar" client:load />

    <div
        class="flex flex-wrap justify-center gap-4 overflow-visible px-8 py-4 md:px-48"
    >
        {
            sections.flatMap((section) => [
                // Section heading
                <div class="w-full text-center first-of-type:collapse">
                    <h2
                        id={section.id}
                        class="mb-2 text-2xl font-bold text-neutral-900"
                    >
                        {section.title}
                    </h2>
                </div>,
                // Section projects
                ...section.projects.map((project) => {
                    const finalizedSlug = createSlug(
                        project.data.title,
                        project.data?.slug,
                    );
                    const thumbnailPath = `/src/content/projects/${finalizedSlug}/assets/thumbnail.png`;
                    return (
                        <ProjectCard
                            project={project}
                            image={images[thumbnailPath]}
                            data-type={project.data.type}
                            data-category={project.data.category}
                        />
                    );
                }),
            ])
        }
    </div>
    <TableOfContents slot="aside-sidebar" headings={projectHeadings} />
</MainLayout>
